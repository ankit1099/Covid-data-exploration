-- =============================================================================
-- creating staging table
(
		SELECT *
		INTO stg.salesData
		FROM [Sales Data].stg.SalesData
		)

SELECT *
FROM stg.salesData




-- ---------------------------------------------------------------
-- CREATING DATE DIMENSION
CREATE TABLE dim.DATE (
	Date_key INT PRIMARY KEY
	,[Date] DATE
	,[DayofWeek] INT
	,[DayName] VARCHAR(9)
	,[day_of_month] VARCHAR(2)
	,[Month] VARCHAR(2)
	,[MonthName] VARCHAR(9)
	,[Quarter] CHAR(1)
	,[quarterName] VARCHAR(9)
	,[year] CHAR(4)
	)

DECLARE @startDate DATE = (
		SELECT DISTINCT TOP 1 orderdate
		FROM STG.salesData
		ORDER BY orderdate
		)
DECLARE @endDate DATE = (
		SELECT DISTINCT TOP 1 orderdate
		FROM STG.salesData
		ORDER BY orderdate DESC
		)
DECLARE @CurrentYear INT
	,@CurrentMonth INT
	,@CurrentQuarter INT
DECLARE @CurrentDate AS DATETIME = @StartDate

SET @CurrentMonth = DATEPART(MM, @CurrentDate)
SET @CurrentYear = DATEPART(YY, @CurrentDate)
SET @CurrentQuarter = DATEPART(QQ, @CurrentDate)

WHILE (@CurrentDate < @endDate)
BEGIN
	IF (@currentMonth != datepart(MM, @CurrentDate))
	BEGIN
		SET @currentMonth = datepart(MM, @CurrentDate)
	END

	IF (@CurrentYear != Datepart(yy, @currentDate))
	BEGIN
		SET @CurrentYear = Datepart(yy, @currentDate)
	END

	IF (@CurrentQuarter != Datepart(qq, @currentdate))
	BEGIN
		SET @CurrentQuarter = Datepart(qq, @currentdate)
	END

	INSERT INTO dim.DATE
	SELECT convert(CHAR(8), @CurrentDate, 112) AS DateKey
		,@currentdate AS DATE
		,datepart(dw, @currentDate) AS day_of_month
		,datename(dw, @currentdate) AS [dayname]
		,datepart(dd, @CurrentDate) AS [DayOfWeek]
		,datepart(mm, @currentDate) AS [Month]
		,datename(mm, @currentDate) AS [MonthName]
		,datepart(qq, @currentDate) AS [Quarter]
		,CASE datepart(qq, @currentDate)
			WHEN 1
				THEN 'First'
			WHEN 2
				THEN 'Second'
			WHEN 3
				THEN 'Third'
			WHEN 4
				THEN 'Fourth'
			END AS QuraterName
		,datepart(year, @CurrentDate) AS [year]

	SET @CurrentDate = DATEADD(DD, 1, @CurrentDate)
END

SELECT *
FROM dim.DATE






-- CREATING PRODUCT DIMENSION
CREATE TABLE dim.product (
	Product_ID INT identity(1, 1) PRIMARY KEY
	,ProductKey NVARCHAR(50)
	,ProductName NVARCHAR(50)
	,Size NVARCHAR(50)
	,ModelName NVARCHAR(50)
	,unit_Price FLOAT
	,Dealer_Price FLOAT
	,Created_date DATETIME DEFAULT getdate()
	,Modified_Date DATETIME
	,currently_active CHAR(1) DEFAULT 'y'
	)

-- stored procedure for loading and updating data in product dimension
CREATE PROCEDURE updateDIMproduct
AS
INSERT INTO dim.product (
	productkey
	,productname
	,size
	,ModelName
	,unit_price
	,dealer_price
	,created_date
	,currently_active
	)
SELECT productkey
	,productname
	,size
	,ModelName
	,unit_price
	,dealer_price
	,created_date
	,currently_active
FROM (
	MERGE INTO dim.product AS target
	USING (
		SELECT DISTINCT productkey
			,productname
			,size
			,ModelName
			,unitprice
			,dealerprice
		FROM stg.salesData
		) AS source
		ON source.productKey = target.productkey
	WHEN MATCHED
		AND (target.currently_active = 'y')
		AND (
			target.productname <> source.productname
			OR target.unit_price <> Source.unitprice
			OR target.size <> source.size
			OR target.ModelName <> source.ModelName
			OR target.dealer_price <> source.DealerPrice
			)
		THEN
			UPDATE
			SET target.currently_active = 'N'
				,target.modified_date = getdate()
	WHEN NOT MATCHED
		THEN
			INSERT (
				productkey
				,productname
				,unit_price
				,size
				,ModelName
				,dealer_price
				)
			VALUES (
				source.productkey
				,source.productname
				,source.unitprice
				,source.size
				,source.ModelName
				,source.DealerPrice
				)
	OUTPUT $ACTION
		,source.productkey
		,source.productname
		,source.size
		,source.ModelName
		,source.unitprice
		,source.dealerprice
		,GETDATE()
		,'y'
	) AS changes(action, productkey, productname, size, ModelName, unit_price, dealer_price, created_date, currently_active)
WHERE action = 'update';

EXEC updateDIMproduct

SELECT *
FROM dim.product
ORDER BY ProductKey





------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
CREATE TABLE dim.Customer (
	Customer_id INT identity(1, 1) PRIMARY KEY
	,CustomerAlternateKey NVARCHAR(50)
	,FirstName NVARCHAR(50)
	,LastName NVARCHAR(50)
	,BirthDate DATE
	,EmailAdd NVARCHAR(50)
	,Created_date DATETIME DEFAULT getdate()
	,End_Date DATETIME
	,currently_active CHAR(1) DEFAULT 'y'
	)

SELECT *
FROM stg.salesData

-------------------------------------------------------------------------------------------------------------------------------
-- inserting records into customer dimension
CREATE PROCEDURE CustomerTableUpdate
AS
INSERT INTO dim.Customer (
	CustomerAlternateKey
	,FirstName
	,LastName
	,BirthDate
	,EmailAdd
	)
SELECT CustomerAlternateKey
	,CustomerFirstName
	,CustomerLastName
	,customerBirthDate
	,EmailAddress
FROM (
	MERGE INTO dim.customer AS t
	USING (
		SELECT DISTINCT stg.salesData.customerAlternateKey
			,stg.salesdata.customerFirstname
			,stg.salesdata.customerLastName
			,stg.salesdata.customerbirthdate
			,stg.salesdata.emailAddress
		FROM stg.salesData
		) AS s
		ON (t.customerAlternateKey = s.customerAlternateKey)
	WHEN MATCHED
		AND t.currently_active = 'Y'
		AND (
			(t.FirstName <> s.CustomerFirstName)
			OR (t.LastName <> s.customerLastname)
			OR (t.BirthDate <> s.customerbirthdate)
			OR (t.EmailAdd <> s.emailAddress)
			)
		THEN
			UPDATE
			SET t.currently_active = 'N'
				,t.end_date = getdate()
	WHEN NOT MATCHED
		THEN
			INSERT (
				CustomerAlternateKey
				,FirstName
				,LastName
				,BirthDate
				,EmailAdd
				)
			VALUES (
				s.CustomerAlternateKey
				,s.CustomerFirstName
				,s.CustomerLastName
				,s.customerBirthDate
				,s.EmailAddress
				)
	OUTPUT $ACTION
		,s.CustomerAlternateKey
		,s.CustomerFirstName
		,s.CustomerLastName
		,s.customerBirthDate
		,s.EmailAddress
	) AS Changes(action, CustomerAlternateKey, CustomerFirstName, CustomerLastName, customerBirthDate, EmailAddress)
WHERE action = 'update';

EXECUTE CustomerTableUpdate

SELECT *
FROM dim.Customer







-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
CREATE TABLE dim.promotion (
	promo_id INT identity(1, 1) PRIMARY KEY
	,promotionName VARCHAR(50)
	,promotionType VARCHAR(50)
	,promotionCategory VARCHAR(50)
	,created_date DATE DEFAULT getdate()
	,end_date DATE
	,currently_active CHAR(1) DEFAULT 'y'
	)

SELECT *
FROM stg.salesData

------------------------------------
-- inserting records into promotion dimension
CREATE PROCEDURE promotionTableUpdate
AS
INSERT INTO dim.promotion (
	promotionName
	,promotionType
	,promotionCategory
	)
SELECT promotionName
	,PromotionType
	,PromotionCategory
FROM (
	MERGE INTO dim.promotion AS t
	USING (
		SELECT DISTINCT stg.salesData.promotionName
			,stg.salesData.PromotionType
			,stg.salesData.PromotionCategory
		FROM stg.salesData
		) AS s
		ON (t.promotionName = s.promotionName)
	WHEN MATCHED
		AND t.currently_active = 'Y'
		AND (
			(t.promotionType <> s.promotionType)
			OR (t.promotionCategory <> s.promotionCategory)
			)
		THEN
			UPDATE
			SET t.currently_active = 'N'
				,t.end_date = getdate()
	WHEN NOT MATCHED
		THEN
			INSERT (
				promotionName
				,promotionType
				,PromotionCategory
				)
			VALUES (
				s.promotionName
				,s.promotionType
				,s.promotionCategory
				)
	OUTPUT $ACTION
		,s.promotionName
		,s.promotionType
		,s.promotionCategory
	) AS Changes(action, promotionName, promotionType, promotionCategory)
WHERE action = 'update';

EXECUTE promotionTableUpdate

SELECT *
FROM dim.promotion






-- ==================================================================================
CREATE TABLE dim.currency (
	CurrencyID INT identity
	,Currencykey VARCHAR(25)
	,currencyName VARCHAR(50)
	,created_date DATE DEFAULT getdate()
	,end_date DATE
	,currently_active CHAR(1) DEFAULT 'Y'
	)

SELECT *
FROM dim.currency

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
-- inserting records into currency dimension
CREATE PROCEDURE CurrencyTableUpdate
AS
INSERT INTO dim.currency (
	currencyKey
	,currencyName
	)
SELECT currencyKey
	,currencyName
FROM (
	MERGE INTO dim.currency AS t
	USING (
		SELECT DISTINCT stg.salesData.currencyKey
			,stg.salesData.currencyName
		FROM stg.salesData
		) AS s
		ON (t.currencyKey = s.currencyKey)
	WHEN MATCHED
		AND t.currently_active = 'Y'
		AND (t.currencyKey <> s.currencyKey)
		THEN
			UPDATE
			SET t.currently_active = 'N'
				,t.end_date = getdate()
	WHEN NOT MATCHED
		THEN
			INSERT (
				currencyKey
				,currencyName
				)
			VALUES (
				s.currencyKey
				,s.currencyName
				)
	OUTPUT $ACTION
		,s.currencyKey
		,s.currencyName
	) AS Changes(action, currencyKey, currencyName)
WHERE action = 'update';

EXECUTE CurrencyTableUpdate

SELECT *
FROM dim.currency 





-= == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==

-- creating fact table-----------
CREATE SCHEMA fact



CREATE TABLE fact.sales (
	product_id INT FOREIGN KEY REFERENCES dim.product(product_id)
	,customer_id INT FOREIGN KEY REFERENCES dim.customer(customer_ID)
	,promo_id INT FOREIGN KEY REFERENCES dim.promotion(promo_ID)
	,currencyID INT FOREIGN KEY REFERENCES dim.currency(currencyID)
	,Date_Key INT FOREIGN KEY REFERENCES dim.DATE (Date_Key)
	,SalesOrderNumber NVARCHAR(25)
	,SalesOrderLineNumber CHAR(5)
	,RevisionNumber CHAR(4)
	,OrderQuantity INT
	,ExtendedAmount FLOAT
	,DiscountAmount FLOAT
	,ProductStandardCost FLOAT
	,TotalProductCost FLOAT
	,SalesAmount FLOAT
	,TaxAmt FLOAT
	,Freight FLOAT
	,OrderDate DATE
	,DueDate DATE
	,ShipDate DATE
	)

SELECT *
FROM fact.sales

CREATE PROCEDURE factTableUpdate
AS
INSERT INTO fact.sales (
	product_id
	,customer_id
	,promo_id
	,currencyID
	,Date_Key
	,SalesOrderNumber
	,SalesOrderLineNumber
	,RevisionNumber
	,OrderQuantity
	,ExtendedAmount
	,DiscountAmount
	,ProductStandardCost
	,TotalProductCost
	,SalesAmount
	,TaxAmt
	,Freight
	,OrderDate
	,DueDate
	,ShipDate
	)
SELECT pd.product_id
	,c.customer_id
	,p.promo_id
	,cur.currencyID
	,DATE.Date_Key
	,stg.SalesOrderNumber
	,stg.SalesOrderLineNumber
	,stg.RevisionNumber
	,stg.OrderQuantity
	,stg.ExtendedAmount
	,stg.DiscountAmount
	,stg.ProductStandardCost
	,stg.TotalProductCost
	,stg.SalesAmount
	,stg.TaxAmt
	,stg.Freight
	,stg.OrderDate
	,stg.DueDate
	,stg.ShipDate
FROM stg.salesdata stg
LEFT JOIN (
	SELECT product_id
		,productKey
	FROM dim.product
	) pd ON stg.productkey = pd.productkey
LEFT JOIN (
	SELECT customer_id
		,customerAlternateKey
	FROM dim.customer
	) c ON stg.customerAlternateKey = c.customerAlternatekey
LEFT JOIN (
	SELECT promo_id
		,promotionName
	FROM dim.promotion
	) p ON stg.promotionName = p.promotionName
LEFT JOIN (
	SELECT currencyID
		,CurrencyKey
	FROM dim.currency
	) cur ON stg.currencykey = cur.currencykey
LEFT JOIN (
	SELECT date_Key
		,DATE
	FROM dim.DATE
	) DATE ON stg.orderdate = DATE.DATE

EXEC factTableUpdate

SELECT *
FROM fact.sales





